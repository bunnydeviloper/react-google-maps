{"version":3,"sources":["components/NoMapDisplay.js","components/GoogleMaps.js","components/SidePanel.js","App.js","serviceWorker.js","index.js"],"names":["NoMapDisplay","state","show","timeout","componentDidMount","window","setTimeout","_this","showMessage","setState","componentWillUnmount","clearTimeout","render","react_default","a","createElement","Component","FS_VERSION","FS_CLIENT_ID","FS_SECRET","MapDisplay","_Component","_getPrototypeOf2","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","map","markers","markerProps","activeMarker","activeMarkerProps","showingInfoWindow","gm_authFailure","componentWillReceiveProps","props","firstDrop","locations","closeInfoWindow","updateMarkers","selectedIndex","onMarkerClicked","onMapReady","forEach","marker","setMap","eachLocation","index","mProps","key","name","position","pos","url","push","google","maps","Marker","animation","Animation","DROP","addListener","getBusinessInfo","data","response","venues","filter","item","includes","e","lat","lng","headers","Headers","request","Request","method","fetch","then","json","result","attractionLoc","objectSpread","foursquare","id","images","photos","setAnimation","BOUNCE","inherits","createClass","value","alert","center","amProps","dist","role","aria-label","onReady","zoom","style","width","height","initialCenter","onClick","visible","onClose","href","alt","src","items","prefix","suffix","GoogleApiWrapper","apiKey","LoadingContainer","SidePanel","open","query","styles","list","padding","noBullets","listStyleType","fullList","listItem","marginBottom","listLink","background","border","color","filterEntry","margin","updateQuery","newQuery","onChangeNewQuery","_this2","Drawer_default","toggleSidePanel","type","placeholder","onChange","target","eachLoc","clickListItem","App","allLocations","filtered","menuButton","marginLeft","marginRight","left","top","hide","display","header","marginTop","filterLocations","toLowerCase","className","GoogleMaps","SidePanel_SidePanel","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","src_App_0","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3cd57bb6.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class NoMapDisplay extends Component {\n  state = {\n    show: false,\n    timeout: null\n  }\n\n  componentDidMount = () => {\n    let timeout = window.setTimeout(this.showMessage, 1000);\n    this.setState({timeout});\n  }\n\n  componentWillUnmount = () => {\n    window.clearTimeout(this.state.timeout);\n  }\n\n  showMessage = () => {\n    this.setState({show: true});\n  }\n\n  render = () => {\n    return (\n      <div>\n        {this.state.show\n            ? (\n              <div>\n                <h3>Error loading map</h3>\n                <p>Check your internet connection!</p>\n              </div>\n            )\n            : (<div><h3>Loading... </h3></div>)\n        } </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { Map, InfoWindow,  GoogleApiWrapper } from 'google-maps-react';\nimport NoMapDisplay from './NoMapDisplay';\n\nconst MAP_KEY = \"AIzaSyCzZvujlnTYKZGkoiQTbFV1Ghr7yM14IEA\";\nconst FS_VERSION = \"20181128\";\nconst FS_CLIENT_ID = \"VKIWAKGQ2NHXSEZBFKIK5E0VNZTRJKGW14MD21SNE2BZFYGH\";\nconst FS_SECRET = \"HZCUYWHRO1GYI3X1SQ5OAD2YYBM1FUKTZU1RUX4JPENRDPEB\";\n\nexport class MapDisplay extends Component {\n  state = {\n    map: null,\n    markers: [],\n    markerProps: [],\n    activeMarker: null,\n    activeMarkerProps: null,\n    showingInfoWindow: false\n  }\n\n  gm_authFailure() {\n    window.alert(\"Google Maps authentication failed! Please check your API key.\");\n  }\n\n  componentDidMount = () => {\n    window.gm_authFailure = () => this.gm_authFailure();\n  }\n\n  componentWillReceiveProps = (props) => {\n    this.setState({ firstDrop: false });\n\n    // update markers according to search filtered result\n    if (this.state.markers.length !== props.locations.length) {\n      this.closeInfoWindow();\n      this.updateMarkers(props.locations);\n      this.setState({ activeMarker: null });\n      return;\n    }\n    // if the selected item is not the same as the active marker, close the info window\n    if (!props.selectedIndex || (this.state.activeMarker &&\n      (this.state.markers[props.selectedIndex] !== this.state.activeMarker))) {\n      this.closeInfoWindow();\n    }\n    // if nothing is selected, don't do anything\n    if (props.selectedIndex === null || typeof(props.selectedIndex) === \"undefined\") {\n      return;\n    };\n\n    this.onMarkerClicked(this.state.markerProps[props.selectedIndex], this.state.markers[props.selectedIndex]);\n  }\n\n  onMapReady = (props, map) => {\n    this.setState({ map });\n    this.updateMarkers(this.props.locations);\n  }\n\n  updateMarkers = (locations) => {\n    if (!locations) return;\n    // remove any existing markers\n    this.state.markers.forEach(marker => marker.setMap(null));\n\n    let markerProps = [];\n    let markers = locations.map((eachLocation, index) => {\n      let mProps = {\n        key: index,\n        index,\n        name: eachLocation.name,\n        position: eachLocation.pos,\n        url: eachLocation.url\n      }\n      markerProps.push(mProps);\n\n      let marker = new this.props.google.maps.Marker({\n        position: eachLocation.pos,\n        map: this.state.map,\n        animation: this.state.firstDrop ? this.props.google.maps.Animation.DROP : null\n      });\n      marker.addListener('click', () => {\n        this.onMarkerClicked(mProps, marker, null);\n      });\n      return marker;\n    });\n\n    this.setState({ markers, markerProps });\n  }\n\n  getBusinessInfo = (props, data) => {\n    // filter the data result from foursquare fetch fn to make sure it matches our location's data\n    return data.response.venues.filter(item => item.name.includes(props.name) || props.name.includes(item.name));\n  }\n\n  onMarkerClicked = (props, marker, e) => {\n    this.closeInfoWindow();\n\n    let url = `https://api.foursquare.com/v2/venues/search?client_id=${FS_CLIENT_ID}\n      &client_secret=${FS_SECRET}&v=${FS_VERSION}&radius=100&ll=${props.position.lat},\n      ${props.position.lng}&llAcc=100`;\n    let headers = new Headers();\n    let request = new Request(url, { method: 'GET', headers });\n\n    let activeMarkerProps;\n    fetch(request)\n      .then(response => response.json())\n      .then(result => {\n        let attractionLoc = this.getBusinessInfo(props, result);\n        activeMarkerProps = {\n          ...props,\n          foursquare: attractionLoc[0]\n        };\n\n        // get image of location from the initial foursquare fetch request above\n        if (activeMarkerProps.foursquare) {\n          let url = `https://api.foursquare.com/v2/venues/${attractionLoc[0].id}/photos?client_id=\n            ${FS_CLIENT_ID}&client_secret=${FS_SECRET}&v=${FS_VERSION}`;\n          fetch(url)\n            .then(response => response.json())\n            .then(result => {\n              activeMarkerProps = {\n                ...activeMarkerProps,\n                images: result.response.photos\n              }\n\n              if (this.state.activeMarker) this.state.activeMarker.setAnimation(null);\n              marker.setAnimation(this.props.google.maps.Animation.BOUNCE);\n              // const img = \"https://3.bp.blogspot.com/-S9XfyKnuKms/WNnrWwV-YZI/AAAAAAAADUs/L3m49TTbPYElBrBSbj4wXxv0sSazxtbggCLcB/s1600/sticker1.png\";\n              // activeMarkerProps.icon = img;\n              this.setState({ showingInfoWindow: true, activeMarker: marker, activeMarkerProps });\n            })\n        } else {\n          marker.setAnimation(this.props.google.maps.Animation.BOUNCE);\n          this.setState({ showingInfoWindow: true, activeMarker: marker, activeMarkerProps });\n        }\n      })\n  }\n\n  closeInfoWindow = () => {\n    // disable any active marker animation\n    this.state.activeMarker && this.state.activeMarker.setAnimation(null);\n    this.setState({ showingInfoWindow: false, activeMarker: null, activeMarkerProps: null });\n  }\n\n  render() {\n    const style = {\n      width: '100%',\n      height: '80%'\n    }\n    const center = {\n      lat: this.props.lat,\n      lng: this.props.lng\n    }\n    let amProps = this.state.activeMarkerProps; // active marker props\n\n    return (\n      <Map\n        role=\"application\"\n        aria-label=\"map\"\n        onReady={this.onMapReady}\n        google={this.props.google}\n        zoom={this.props.zoom}\n        style={style}\n        initialCenter={center}\n        onClick={this.closeInfoWindow}\n      >\n        <InfoWindow\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.closeInfoWindow}\n        >\n          <div>\n            {amProps && amProps.url\n                ? (\n                  <div>\n                    <a href={amProps.url}><h3>{amProps.name}</h3></a>\n                  </div>\n                )\n                : <h3>{amProps && amProps.name}</h3> }\n                {amProps && amProps.images\n                    ? (\n                      <div>\n                        <img\n                          alt={amProps.name + \" picture\"}\n                          src={amProps.images.items[0].prefix + \"80x80\" + amProps.images.items[0].suffix}/>\n                        <p>Image from Foursquare</p>\n                      </div>\n                    )\n                    : \"\" }\n                  </div>\n                </InfoWindow>\n              </Map>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({ apiKey: MAP_KEY, LoadingContainer: NoMapDisplay })(MapDisplay)\n\n// credit: https://github.com/fullstackreact/google-maps-react\n","import React, { Component } from 'react';\nimport Drawer from '@material-ui/core/Drawer';\n\nexport default class SidePanel extends Component {\n  state = {\n    open: false,\n    query: \"\"\n  }\n\n  styles = {\n    list: {\n      width: \"250px\",\n      padding: \"0px 15px 0px\"\n    },\n    noBullets: {\n      listStyleType: \"none\",\n      padding: 0\n    },\n    fullList: {\n      width: 'auto'\n    },\n    listItem: {\n      marginBottom: \"15px\"\n    },\n    listLink: {\n      background: \"transparent\",\n      border: \"none\",\n      color: \"black\"\n    },\n    filterEntry: {\n      border: \"1px solid gray\",\n      padding: \"3px\",\n      margin: \"30px 0px 10px\",\n      width: \"100%\"\n    }\n  }\n\n  updateQuery = (newQuery) => {\n    this.setState({ query: newQuery });\n    this.props.onChangeNewQuery(newQuery);\n  }\n\n  render() {\n    return (\n      <div>\n        <Drawer open={this.props.open} onClose={this.props.toggleSidePanel}>\n          <div style={this.styles.list}>\n            <input\n              style={this.styles.filterEntry}\n              type=\"text\"\n              placeholder=\"search related places...\"\n              name=\"filter\"\n              onChange={e => this.updateQuery(e.target.value)}\n              value={this.state.query}\n            />\n            <ul style={this.styles.noBullets}>\n              {this.props.locations && this.props.locations.map((eachLoc, index) => {\n                return (\n                  <li style={this.styles.listItem} key={index}>\n                    <button style={this.styles.listLink} key={index}\n                      onClick={e => this.props.clickListItem(index)}>{eachLoc.name}</button>\n                  </li>\n                )\n              })}\n            </ul>\n          </div>\n        </Drawer>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport locations from './data/locations';\n\nimport GoogleMaps from './components/GoogleMaps';\nimport SidePanel from './components/SidePanel';\n\nclass App extends Component {\n  state = {\n    lat: 47.6205063,\n    lng: -122.3514661,\n    zoom: 13,\n    allLocations: locations,\n    open: false,\n    filtered: null\n  }\n\n  styles = {\n    menuButton: {\n      marginLeft: 10,\n      marginRight: 20,\n      position: \"absolute\",\n      left: 10,\n      top: 10,\n      background: \"white\",\n      padding: 10,\n    },\n    hide: {\n      display: \"none\"\n    },\n    header: {\n      marginTop: \"0px\"\n    }\n  }\n\n  componentDidMount = () => {\n    this.setState({\n      ...this.state,\n      filtered: this.filterLocations(this.state.allLocations, \"\")\n    });\n  }\n\n  toggleSidePanel = () => {\n    this.setState({ open: !this.state.open });\n  }\n\n  filterLocations = (locations, query) => {\n    return locations.filter(eachLoc => eachLoc.name.toLowerCase().includes(query.toLowerCase()));\n  }\n\n  updateQuery = (query) => {\n    this.setState({\n      ...this.state,\n      selectedIndex: null,\n      filtered: this.filterLocations(this.state.allLocations, query)\n    });\n  }\n\n  clickListItem = (index) => {\n    this.setState({ selectedIndex: index, open: !this.state.open })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <button onClick={this.toggleSidePanel} style={this.styles.menuButton}>\n            <i className=\"fa fa-bars\"></i>\n          </button>\n          <h1>React Neighborhood Map Project</h1>\n        </div>\n        <GoogleMaps\n          lat={this.state.lat}\n          lng={this.state.lng}\n          zoom={this.state.zoom}\n          locations={this.state.filtered}\n          selectedIndex={this.state.selectedIndex}\n          clickListItem={this.clickListItem}\n        />\n        <SidePanel\n          locations={this.state.filtered}\n          open={this.state.open}\n          toggleSidePanel={this.toggleSidePanel}\n          onChangeNewQuery={this.updateQuery}\n          clickListItem={this.clickListItem}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}